[{"/home/yapr9001/otherspace/rkt-todo/src/Todo/index.js":"1","/home/yapr9001/otherspace/rkt-todo/src/index.js":"2","/home/yapr9001/otherspace/rkt-todo/src/App.js":"3","/home/yapr9001/otherspace/rkt-todo/src/stores/index.js":"4","/home/yapr9001/otherspace/rkt-todo/src/reducers/index.js":"5","/home/yapr9001/otherspace/rkt-todo/src/reducers/todo.js":"6","/home/yapr9001/otherspace/rkt-todo/src/constants/index.js":"7","/home/yapr9001/otherspace/rkt-todo/src/actions/index.js":"8"},{"size":3840,"mtime":1606479123773,"results":"9","hashOfConfig":"10"},{"size":499,"mtime":1606393799404,"results":"11","hashOfConfig":"10"},{"size":196,"mtime":1606394596830,"results":"12","hashOfConfig":"10"},{"size":301,"mtime":1606467432143,"results":"13","hashOfConfig":"10"},{"size":164,"mtime":1606412347843,"results":"14","hashOfConfig":"10"},{"size":829,"mtime":1606473726899,"results":"15","hashOfConfig":"10"},{"size":163,"mtime":1606413110571,"results":"16","hashOfConfig":"10"},{"size":503,"mtime":1606473718987,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1pb0q60",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/yapr9001/otherspace/rkt-todo/src/Todo/index.js",["36"],"import React, {useEffect, useRef, useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v1 as uuid } from 'uuid';\nimport {createTodo} from '../actions';\n\nconst Todo = (props) => {\n    const [newTodoInput, setNewTodoInput] = useState(\"\");\n    const [editTodoInput, setEditTodoInput] = useState(\"\");\n    const [isEditMode, setIsEditMode] = useState(false);\n    const editInput = useRef(null);\n    const activeTaskId = todos[3].id;\n    const dispatch  = useDispatch();\n    const todos = useSelector(state => state.todos)\n  \n    const selectedTodo =\n      (activeTaskId && todos.find(todo => todo.id === activeTaskId)) || null;\n  \n    const handleNewInputChange = (e) => {\n      setNewTodoInput(e.target.value);\n    };\n  \n    const handleEditInputChange = (e) => {\n      setEditTodoInput(e.target.value);\n    };\n  \n    const handleCreateNewTodo = (e) => {\n      e.preventDefault();\n      if(newTodoInput){\n        dispatch(createTodo({\n          id: uuid(),\n          task: newTodoInput,\n          isComplete: false\n        }))\n      }\n      setNewTodoInput(\"\")\n    };\n  \n    const handleSelectTodo = (todoId) => () => {};\n  \n    const handleEdit = () => {\n      if (!selectedTodo) return;\n  \n      setEditTodoInput(selectedTodo.task);\n      setIsEditMode(true);\n    };\n  \n    useEffect(() => {\n      if (isEditMode) {\n        editInput?.current?.focus();\n      }\n    }, [isEditMode]);\n  \n    const handleUpdate = (e) => {\n      e.preventDefault();\n    };\n  \n    const handleCancelUpdate = (e) => {\n      e.preventDefault();\n      setIsEditMode(false);\n      setEditTodoInput(\"\");\n    };\n  \n    const handleDelete = () => {\n      if (!activeTaskId) return;\n    };\n  \n    return (\n      <div className=\"App\">\n        <div className=\"\">\n          <h1>Todo</h1>\n          <form onSubmit={handleCreateNewTodo}>\n            <label htmlFor=\"new-todo\">Add new:</label>\n            <input\n              onChange={handleNewInputChange}\n              id=\"new-todo\"\n              value={newTodoInput}\n            />\n            <button type=\"submit\">Create</button>\n          </form>\n        </div>\n        <div className=\"App__body\">\n          <ul className=\"App__list\">\n            <h2>Task Todo:</h2>\n            {todos.map((todo, i) => (\n              <li\n                className={`${todo.isComplete ? \"done\" : \"\"} ${\n                  todo.id === activeTaskId ? \"active\" : \"\"\n                }`}\n                key={todo.id}\n                onClick={handleSelectTodo(todo.id)}\n              >\n                <span className=\"list-number\">{i + 1})</span> {todo.task}\n              </li>\n            ))}\n          </ul>\n          <div className=\"App_todo-info\">\n            <h2>Active Task:</h2>\n            {selectedTodo === null ? (\n              <span className=\"empty-state\">No Active Task</span>\n            ) : !isEditMode ? (\n              <>\n                <span\n                  className={`todo-desc ${\n                    selectedTodo?.isComplete ? \"done\" : \"\"\n                  }`}\n                >\n                  {selectedTodo.task}\n                </span>\n                <div className=\"todo-actions\">\n                  <button onClick={handleEdit}>Edit</button>\n                  <button onClick={handleDelete}>Delete</button>\n                </div>\n              </>\n            ) : (\n              <form onSubmit={handleUpdate}>\n                <label htmlFor=\"edit-todo\">Edit:</label>\n                <input\n                  ref={editInput}\n                  onChange={handleEditInputChange}\n                  value={editTodoInput}\n                />\n                <button type=\"submit\">Update</button>\n                <button onClick={handleCancelUpdate}>Cancel</button>\n              </form>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n};\n\nexport default Todo;","/home/yapr9001/otherspace/rkt-todo/src/index.js",[],"/home/yapr9001/otherspace/rkt-todo/src/App.js",[],["37","38"],"/home/yapr9001/otherspace/rkt-todo/src/stores/index.js",[],"/home/yapr9001/otherspace/rkt-todo/src/reducers/index.js",[],"/home/yapr9001/otherspace/rkt-todo/src/reducers/todo.js",[],"/home/yapr9001/otherspace/rkt-todo/src/constants/index.js",[],"/home/yapr9001/otherspace/rkt-todo/src/actions/index.js",[],{"ruleId":"39","severity":1,"message":"40","line":11,"column":26,"nodeType":"41","messageId":"42","endLine":11,"endColumn":31},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},"no-use-before-define","'todos' was used before it was defined.","Identifier","usedBeforeDefined","no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-global-assign","no-unsafe-negation"]